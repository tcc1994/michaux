<?xml version="1.1" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo" 
	xsi:schemaLocation="http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://cxf.apache.org/jaxws
		http://cxf.apache.org/schemas/jaxws.xsd 
		http://www.springframework.org/schema/data/mongo   
        http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd " 
	default-lazy-init="true">

	<description>Spring公共配置 </description>
	
	<context:component-scan base-package="com.tcc.main">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	
	<!-- 读取配置文件 
	<context:property-placeholder ignore-unresolvable="true" location="classpath*:/application.properties" />-->
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:conf/application.properties</value>			
				<value>classpath:conf/redis.properties</value>
				<value>classpath:conf/jpush.properties</value>
				<value>classpath:conf/mongodb.properties</value>
			</list>
		</property>
	</bean>

	<util:properties id="reconciliation" location="classpath:conf/reconciliation.properties"></util:properties>
	<util:properties id="jpush" location="classpath:conf/jpush.properties"></util:properties>
	<util:properties id="cpconfig" location="classpath:conf/cp_config.properties"></util:properties>
	<util:properties id="amsCaptainSms" location="classpath:conf/amsCaptainSms.properties"></util:properties>
	<util:properties id="pay" location="classpath:conf/adapay.properties"></util:properties>
	
	<!-- redis -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="50" />
		<property name="testOnBorrow" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="300000" ></property>
	</bean>
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">  
        <property name="hostName" value="192.168.212.129"></property>  
        <property name="port" value="6379"></property>  
        <property name="password" value="123456"></property>  
        <property name="poolConfig" ref="jedisPoolConfig"></property>  
    </bean>
    <bean id="stringRedisSerializer"  class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <!-- 如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can't cast to String！！！-->
        <property name="keySerializer" ref="stringRedisSerializer"/>
        <property name="hashKeySerializer" ref="stringRedisSerializer"/>
        <property name="valueSerializer" ref="stringRedisSerializer"/>
    </bean>
    
    <!-- mongodb -->
    <!-- MongoDB配置,version v3.4.2 -->
	<mongo:mongo id="mongo" replica-set="${mongodb.url}">
		<!-- connections-per-host: 每个主机答应的连接数（每个主机的连接池大小），当连接池被用光时，会被阻塞住 -->
		<!-- 可阻塞线程数：连接数乘以multiplier -->
		<!-- connect-timeout:在建立（打开）套接字连接时的超时时间（ms） -->
		<!-- max-wait-time: 被阻塞线程从连接池获取连接的最长等待时间（ms） -->
		<!-- socket-timeout:套接字超时时间;该值会被传递给Socket.setSoTimeout(int) -->
		<!-- 是否自动尝试重新连接 -->
		<!-- slave-ok:指明是否答应驱动从次要节点或者奴隶节点读取数据 -->
		<mongo:options 
			connections-per-host="${mongodb.connections}" 
			threads-allowed-to-block-for-connection-multiplier="${mongodb.multiplier}" 
			connect-timeout="${mongodb.connect.timeout}" 
			max-wait-time="${mongodb.wait.time}" 
			auto-connect-retry="${mongodb.connect.retry}" 
			socket-keep-alive="${mongodb.socket.keep.alive}" 
			socket-timeout="${mongodb.socket.timeout}" 
			slave-ok="${mongodb.slave.ok}" 
			write-number="${mongodb.write.number}" 
			write-timeout="${mongodb.write.timeout}" 
			write-fsync="${mongodb.write.fsync}" />
	</mongo:mongo>
	<!-- 设置使用的数据库 名 -->
	<mongo:db-factory dbname="dbname" mongo-ref="mongo" />
	<bean id="userCredentials" class="org.springframework.data.authentication.UserCredentials">
		<constructor-arg  name="username" value="${mongodb.username}" /> 
		<constructor-arg  name="password" value="${mongodb.password}" /> 
	</bean>
	<!-- mongodb的模板 -->
	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg ref="mongo" />
		<constructor-arg name="databaseName" value="${mongodb.database}" />
		<constructor-arg ref="userCredentials" />
	</bean>

    <!--2 配置C3P0数据源  -->
    <!--数据一 -->
    <bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <!--驱动类名 -->
        <property name="driverClass" value="${jdbc.driver}" />
        <!-- url -->
        <property name="jdbcUrl" value="${jdbc.url}" />
        <!-- 用户名 -->
        <property name="user" value="${jdbc.username}" />
        <!-- 密码 -->
        <property name="password" value="${jdbc.password}" />
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数  -->
        <property name="acquireIncrement" value="5"></property>
        <!-- 初始连接池大小 -->
        <property name="initialPoolSize" value="10"></property>
        <!-- 连接池中连接最小个数 -->
        <property name="minPoolSize" value="5"></property>
        <!-- 连接池中连接最大个数 -->
        <property name="maxPoolSize" value="20"></property>
    </bean>

   
    <!--3 会话工厂bean sqlSessionFactoryBean -->

    <!-- 数据源 一  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="datasource"></property>
        <!-- 别名 -->
        <property name="typeAliasesPackage" value="com.tcc.main.domain.local"></property>
        <!-- sql映射文件路径 -->
        <property name="mapperLocations" value="classpath*:mybits/*/*Mapper.xml"></property>
    </bean>


    <!--4 自动扫描对象关系映射 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定会话工厂，如果当前上下文中只定义了一个则该属性可省去 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!-- 指定要自动扫描接口的基础包，实现接口 -->
        <property name="basePackage" value="com.tcc.main.dao.local"></property>
    </bean>

    
    <!--5 声明式事务管理 -->
    <!--定义事物管理器，由spring管理事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource"></property>
    </bean>
    <!--支持注解驱动的事务管理，指定事务管理器 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--6 容器自动扫描IOC组件  -->
    <context:component-scan base-package="com.tcc.main"></context:component-scan>
    
    <!--7 aspectj支持自动代理实现AOP功能 -->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
    



		
	<!-- aop记录方法执行时间   拦截 service 包中的所有方法-->
	<!--  <aop:config>      
        <aop:advisor id="methodTimeLog" advice-ref="methodTimeAdvice" pointcut="execution(* *..service..*(..))"/>
    </aop:config> -->
    
   <!--  <bean id="methodTimeAdvice" class="com.ada.wuliu.ams.front.common.utils.MethodTimeAdvice"/>
    <bean id="mobileCargoService" class="com.ada.wuliu.ams.front.mbservice.publish.MobileCargoServiceImpl"/>
    <bean id="mongodbOperation" class="com.ada.wuliu.ams.front.common.mongodb.MongodbOperationImpl"/>
    <bean id="mobileTripService" class="com.ada.wuliu.ams.front.mbservice.publish.MobileTripServiceImpl"/>
    <bean id="mobileOrderCancelService" class="com.ada.wuliu.ams.front.mbservice.order.MobileOrderCancelServiceImpl"/> -->
    
    <!-- 声明任务工厂 -->  
   <!--  <bean id="scheduler" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
        <property name="dataSource" ref="datasource" />
		<property name="configLocation" value="classpath:conf/quartz.properties" />
		 <property name="schedulerContextAsMap">      
            <map>  -->     
                <!-- spring 管理的service需要放到这里，才能够注入成功 -->
               <!--  <description>schedulerContextAsMap</description>    -->
                <!-- <entry key="mobileCargoService" value-ref="mobileCargoService" />
                <entry key="mongodbOperation" value-ref="mongodbOperation" />
                <entry key="mobileTripService" value-ref="mobileTripService" />
                <entry key="mobileOrderCancelService" value-ref="mobileOrderCancelService" /> -->
            <!-- </map>      
        </property>  --> 
		<!--applicationContextSchedulerContextKey： 
		是org.springframework.scheduling.quartz.SchedulerFactoryBean这个类中
		把spring上下 文以key/value的方式存放在了quartz的上下文中了，
		可以用applicationContextSchedulerContextKey所定义的key得到对应的spring上下文-->  
		<!-- <property name="applicationContextSchedulerContextKey" value="applicationContextKey"/>    
    </bean> -->  

    
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
          <property name="maxUploadSize"><value>10000000</value></property> 
          <property name="defaultEncoding"><value>UTF-8</value></property> 
    </bean> 
 <!--   <bean id="SpringApplicationContext" class="com.tianyu.jty.common.utils.ApplicationContextHelper"></bean> --> 
    <import resource="classpath*:spring/spring-redis.xml" />
	
</beans>