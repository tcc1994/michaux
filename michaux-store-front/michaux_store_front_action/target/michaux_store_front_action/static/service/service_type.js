// 本文件用js实现map,并定义服务类型的数据
var map = new Map();
// 一级
map.put(1101, "呼入");map.put(2101, "呼出");
// 二级
map.put(1201, "业务咨询");map.put(1202, "非业务类");map.put(1203, "投诉");map.put(1204, "其他");
map.put(2201, "满意度回访");map.put(2202, "认证外呼");map.put(2203, "投诉");map.put(2204, "非业务类");map.put(2205, "业务跟进");
// 三级
map.put(1301, "APP");map.put(1302, "PC");map.put(1313, "其他");
map.put(1303, "测试");map.put(1304, "闪断");map.put(1305, "无效电话");map.put(1306, "转接");map.put(1307, "其他");
map.put(1308, "服务");map.put(1309, "产品");map.put(1310, "空跑赔付");map.put(1311, "活动");map.put(1312, "其他");
map.put(2301, "认证失败");map.put(2302, "APP");map.put(2303, "PC");map.put(2304, "服务");map.put(2305, "产品");
map.put(2306, "空跑赔付");map.put(2307, "活动");map.put(2308, "其他");map.put(2309, "其他");
// 四级
map.put(1401, "个人司机");map.put(1402, "个体车主(车队)");map.put(1403, "个人货主");map.put(1404, "企业车主(车队)");map.put(1405, "企业货主");
map.put(1406, "阿大车主");map.put(1407, "阿大货主");map.put(1408, "配货站");map.put(1409, "加盟商");map.put(1410, "其他");
map.put(2401, "个人司机");map.put(2402, "个体车主(车队)");map.put(2403, "个人货主");map.put(2404, "企业车主(车队)");map.put(2405, "企业货主");
map.put(2406, "阿大车主");map.put(2407, "阿大货主");map.put(2408, "配货站");map.put(2409, "加盟商");map.put(2410, "其他");
// 五级
map.put(1501, "认证");map.put(1502, "注册");map.put(1503, "产品");map.put(1504, "审核");map.put(1505, "货源");
map.put(1506, "车源");map.put(1507, "费用");map.put(1508, "活动");map.put(1509, "发票");map.put(1511, "合作");map.put(1510, "其他");
map.put(2501, "认证");map.put(2502, "注册");map.put(2503, "产品");map.put(2504, "审核");map.put(2505, "货源");
map.put(2506, "车源");map.put(2507, "费用");map.put(2508, "活动");map.put(2509, "发票");map.put(2510, "其他");

// 建立关联关系
map.put("110100", "1201,1202,1203,1204"); // 呼入下的所有选择
map.put("120100", "1301,1302,1313"); // 呼入业务咨询下的所有选择
map.put("120200", "1303,1304,1305,1306,1307"); // 呼入非业务类下的所有选择
map.put("120300", "1308,1309,1310,1311,1312"); // 呼入投诉下的所有选择
map.put("120400", "1301,1302,1313");
map.put("130100", "1401,1402,1403,1404,1405,1406,1407,1408,1409,1410"); // 呼入APP下的所有选择
map.put("130200", "1401,1402,1403,1404,1405,1406,1407,1408,1409,1410"); // 呼入PC下的所有选择
map.put("131300", "1401,1402,1403,1404,1405,1406,1407,1408,1409,1410"); 

map.put("140100", "1501,1502,1503,1504,1505,1506,1507,1508,1509,1511,1510");
map.put("140200", "1501,1502,1503,1504,1505,1506,1507,1508,1509,1511,1510");
map.put("140300", "1501,1502,1503,1504,1505,1506,1507,1508,1509,1511,1510");
map.put("140400", "1501,1502,1503,1504,1505,1506,1507,1508,1509,1511,1510");
map.put("140500", "1501,1502,1503,1504,1505,1506,1507,1508,1509,1511,1510");
map.put("140600", "1501,1502,1503,1504,1505,1506,1507,1508,1509,1511,1510");
map.put("140700", "1501,1502,1503,1504,1505,1506,1507,1508,1509,1511,1510");
map.put("140800", "1501,1502,1503,1504,1505,1506,1507,1508,1509,1511,1510");
map.put("140900", "1501,1502,1503,1504,1505,1506,1507,1508,1509,1511,1510");
map.put("141000", "1501,1502,1503,1504,1505,1506,1507,1508,1509,1511,1510");

map.put("210100", "2201,2202,2203,2204,2205"); // 呼出下的所有选择
map.put("220200", "2301"); // 呼出认证外呼下的所有选择
map.put("220300", "2304,2305,2306,2307,2308"); // 呼出投诉下的所有选择
map.put("220400", "2309"); // 呼出非业务类下的所有选择
map.put("220500", "2302,2303"); // 呼出业务跟进下的所有选择
map.put("230200", "2401,2402,2403,2404,2405,2406,2407,2408,2409,2410"); // 呼出APP下的所有选择
map.put("230300", "2401,2402,2403,2404,2405,2406,2407,2408,2409,2410"); // 呼出PC下的所有选择
map.put("240100", "2501,2502,2503,2504,2505,2506,2507,2508,2509,2510");
map.put("240200", "2501,2502,2503,2504,2505,2506,2507,2508,2509,2510");
map.put("240300", "2501,2502,2503,2504,2505,2506,2507,2508,2509,2510");
map.put("240400", "2501,2502,2503,2504,2505,2506,2507,2508,2509,2510");
map.put("240500", "2501,2502,2503,2504,2505,2506,2507,2508,2509,2510");
map.put("240600", "2501,2502,2503,2504,2505,2506,2507,2508,2509,2510");
map.put("240700", "2501,2502,2503,2504,2505,2506,2507,2508,2509,2510");
map.put("240800", "2501,2502,2503,2504,2505,2506,2507,2508,2509,2510");
map.put("240900", "2501,2502,2503,2504,2505,2506,2507,2508,2509,2510");
map.put("241000", "2501,2502,2503,2504,2505,2506,2507,2508,2509,2510");


function Map() {
    /** 存放键的数组(遍历用到) */
    this.keys = new Array();
    /** 存放数据 */
    this.data = new Object();
    
    /**
     * 放入一个键值对
     * @param {String} key
     * @param {Object} value
     */
    this.put = function(key, value) {
        if(this.data[key] == null){
            this.keys.push(key);
        }
        this.data[key] = value;
    };
    
    /**
     * 获取某键对应的值
     * @param {String} key
     * @return {Object} value
     */
    this.get = function(key) {
        return this.data[key];
    };
    
    /**
     * 删除一个键值对
     * @param {String} key
     */
    this.remove = function(key) {
        this.keys.remove(key);
        this.data[key] = null;
    };
    
    /**
     * 遍历Map,执行处理函数
     * 
     * @param {Function} 回调函数 function(key,value,index){..}
     */
    this.each = function(fn){
        if(typeof fn != 'function'){
            return;
        }
        var len = this.keys.length;
        for(var i=0;i<len;i++){
            var k = this.keys[i];
            fn(k,this.data[k],i);
        }
    };
    
    /**
     * 获取键值数组(类似Java的entrySet())
     * @return 键值对象{key,value}的数组
     */
    this.entrys = function() {
        var len = this.keys.length;
        var entrys = new Array(len);
        for (var i = 0; i < len; i++) {
            entrys[i] = {
                key : this.keys[i],
                value : this.data[i]
            };
        }
        return entrys;
    };
    
    /**
     * 判断Map是否为空
     */
    this.isEmpty = function() {
        return this.keys.length == 0;
    };
    
    /**
     * 获取键值对数量
     */
    this.size = function(){
        return this.keys.length;
    };
    
    /**
     * 重写toString 
     */
    this.toString = function(){
        var s = "{";
        for(var i=0;i<this.keys.length;i++,s+=','){
            var k = this.keys[i];
            s += k+"="+this.data[k];
        }
        s+="}";
        return s;
    };
}